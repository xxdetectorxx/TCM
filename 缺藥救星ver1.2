from itertools import combinations, chain
from scipy.optimize import minimize

# 定義方劑數據庫
prescription_database = {
    "四君子湯": {
        '人參': round(6.0 / 10.5, 2),
        '茯苓': round(6.0 / 10.5, 2),
        '炙甘草': round(3.0 / 10.5, 2),
        '白朮': round(6.0 / 10.5, 2),
        '生薑': round(3.0 / 10.5, 2),
        '大棗': round(2.0 / 10.5, 2),
    },
    "四物湯": {
        '熟地黃': round(7.5 / 16.5, 2),
        '白芍': round(7.5 / 16.5, 2),
        '當歸': round(7.5 / 16.5, 2),
        '川芎': round(7.5 / 16.5, 2),
    },
    "十全大補湯": {
        '茯苓': round(3.0 / 15, 2),
        '白朮': round(3.0 / 15, 2),
        '人參': round(3.0 / 15, 2),
        '熟地黃': round(3.0 / 15, 2),
        '白芍': round(3.0 / 15, 2),
        '炙甘草': round(3.0 / 15, 2),
        '黃耆': round(3.0 / 15, 2),
        '肉桂': round(3.0 / 15, 2),
        '當歸': round(3.0 / 15, 2),
        '川芎': round(3.0 / 15, 2),
        '生薑': round(3.0 / 15, 2),
        '大棗': round(2.0 / 15, 2),
    },
    "一貫煎": {
        '沙參': round(4.0 / 18, 2),
        '麥門冬': round(4.0 / 18, 2),
        '生地黃': round(8.0 / 18, 2),
        '當歸': round(4.0 / 18, 2),
        '枸杞子': round(4.0 / 18, 2),
        '川楝子': round(2.0 / 18, 2),
    },
    "沙參麥冬湯": {
        '沙參': round(6.0 / 12, 2),
        '麥門冬': round(6.0 / 12, 2),
        '玉竹': round(4.0 / 12, 2),
        '甘草': round(2.0 / 12, 2),
        '桑葉': round(3.0 / 12, 2),
        '生扁豆': round(3.0 / 12, 2),
        '栝樓根': round(3.0 / 12, 2),
    },"黃連解毒湯": {
        '黃連': round(6.0 / 9, 2),
        '黃芩': round(6.0 / 9, 2),
        '黃柏': round(6.0 / 9, 2),
        '山梔子': round(6.0 / 9, 2),
    },
    "溫清飲": {
        '黃連': round(3.5 / 15, 2),
        '黃柏': round(3.5 / 15, 2),
        '黃芩': round(3.5 / 15, 2),
        '山梔子': round(3.5 / 15, 2),
        '當歸': round(3.5 / 15, 2),
        '川芎': round(3.5 / 15, 2),
        '白芍': round(3.5 / 15, 2),
        '熟地黃': round(3.5 / 15, 2),
    },
    "補中益氣湯": {
        '黃耆': round(6.0 / 15, 2),
        '人參': round(4.0 / 15, 2),
        '白朮': round(2.0 / 15, 2),
        '炙甘草': round(4.0 / 15, 2),
        '當歸': round(2.0 / 15, 2),
        '陳皮': round(2.0 / 15, 2),
        '升麻': round(1.0 / 15, 2),
        '柴胡': round(1.0 / 15, 2),
        '生薑': round(3.0 / 15, 2),
        '大棗': round(2.0 / 15, 2),
    },
    "瀉黃散": {
        '防風': round(12.0 / 9, 2),
        '廣藿香': round(2.1 / 9, 2),
        '山梔子': round(3.0 / 9, 2),
        '石膏': round(1.5 / 9, 2),
        '甘草': round(6.0 / 9, 2),
    },
    "清暑益氣湯": {
        '黃耆': round(3.0 / 12, 2),
        '蒼朮': round(3.0 / 12, 2),
        '升麻': round(3.0 / 12, 2),
        '人參': round(1.5 / 12, 2),
        '澤瀉': round(1.5 / 12, 2),
        '神麴': round(1.5 / 12, 2),
        '陳皮': round(1.5 / 12, 2),
        '白朮': round(1.5 / 12, 2),
        '麥門冬': round(1.0 / 12, 2),
        '當歸': round(1.0 / 12, 2),
        '炙甘草': round(1.0 / 12, 2),
        '青皮': round(1.0 / 12, 2),
        '黃柏': round(1.0 / 12, 2),
        '葛根': round(1.0 / 12, 2),
        '五味子': round(0.5 / 12, 2),
        '生薑': round(3.0 / 12, 2),
        '大棗': round(2.0 / 12, 2),
    },
    "七味白朮散": {
        '人參': round(3.0 / 9, 2),
        '廣藿香': round(3.0 / 9, 2),
        '白朮': round(3.0 / 9, 2),
        '木香': round(3.0 / 9, 2),
        '茯苓': round(3.0 / 9, 2),
        '甘草': round(3.0 / 9, 2),
        '葛根': round(6.0 / 9, 2),
    },
    "加味逍遙散": {
        '當歸': round(4.0 / 15, 2),
        '白朮': round(4.0 / 15, 2),
        '白芍': round(4.0 / 15, 2),
        '柴胡': round(4.0 / 15, 2),
        '茯苓': round(4.0 / 15, 2),
        '炙甘草': round(2.0 / 15, 2),
        '牡丹皮': round(2.5 / 15, 2),
        '山梔子': round(2.5 / 15, 2),
        '煨薑': round(4.0 / 15, 2),
        '薄荷': round(2.0 / 15, 2),
    },
    "散腫潰堅湯": {
        '黃芩': round(4.0 / 12, 2),
        '龍膽': round(2.5 / 12, 2),
        '栝樓根': round(2.5 / 12, 2),
        '黃柏': round(4.0 / 12, 2),
        '知母': round(2.5 / 12, 2),
        '桔梗': round(2.5 / 12, 2),
        '昆布': round(2.5 / 12, 2),
        '柴胡': round(2.5 / 12, 2),
        '炙甘草': round(1.5 / 12, 2),
        '荊三稜': round(1.5 / 12, 2),
        '莪朮': round(1.5 / 12, 2),
        '連翹': round(1.5 / 12, 2),
        '葛根': round(1.5 / 12, 2),
        '白芍': round(1.0 / 12, 2),
        '當歸尾': round(1.0 / 12, 2),
        '黃連': round(1.0 / 12, 2),
        '升麻': round(0.5 / 12, 2),
    },
    "真人活命飲（去穿山甲）": {
        '金銀花': round(2.00 / 6, 2),
        '當歸': round(1.50 / 6, 2),
        '防風': round(0.70 / 6, 2),
        '浙貝母': round(1.00 / 6, 2),
        '栝樓根': round(1.00 / 6, 2),
        '乳香': round(0.50 / 6, 2),
        '皂莢': round(0.50 / 6, 2),
        '陳皮': round(1.50 / 6, 2),
        '白芷': round(1.00 / 6, 2),
        '甘草': round(1.00 / 6, 2),
        '沒藥': round(0.50 / 6, 2),
    },
    "柴胡桂枝湯": {
        '柴胡': round(5.0 / 4.5, 2),
        '半夏': round(4.0 / 4.5, 2),
        '桂枝': round(2.5 / 4.5, 2),
        '白芍': round(2.5 / 4.5, 2),
        '黃芩': round(2.5 / 4.5, 2),
        '人參': round(1.5 / 4.5, 2),
        '大棗': round(2.0 / 4.5, 2),
        '甘草': round(1.5 / 4.5, 2),
        '生薑': round(1.0 / 4.5, 2),
    },
    "桂枝湯": {
        '桂枝': round(6.0 / 7.5, 2),
        '白芍': round(6.0 / 7.5, 2),
        '炙甘草': round(4.0 / 7.5, 2),
        '生薑': round(6.0 / 7.5, 2),
        '大棗': round(5.0 / 7.5, 2),
    },
    "保和丸": {
        '山楂': round(12.0 / 12, 2),
        '神麴': round(4.0 / 12, 2),
        '半夏': round(4.0 / 12, 2),
        '茯苓': round(4.0 / 12, 2),
        '陳皮': round(2.0 / 12, 2),
        '連翹': round(2.0 / 12, 2),
        '萊菔子': round(2.0 / 12, 2),
    },
    "小柴胡湯": {
        '柴胡': round(8.0 / 10.5, 2),
        '黃芩': round(3.0 / 10.5, 2),
        '人參': round(3.0 / 10.5, 2),
        '炙甘草': round(3.0 / 10.5, 2),
        '半夏': round(5.0 / 10.5, 2),
        '生薑': round(3.0 / 10.5, 2),
        '大棗': round(2.0 / 10.5, 2),
    },
    "少腹逐瘀湯": {
        '小茴香': round(0.2 / 12, 2),
        '乾薑': round(0.4 / 12, 2),
        '延胡索': round(2.0 / 12, 2),
        '沒藥': round(2.0 / 12, 2),
        '當歸': round(6.0 / 12, 2),
        '川芎': round(2.0 / 12, 2),
        '肉桂': round(2.0 / 12, 2),
        '赤芍': round(4.0 / 12, 2),
        '蒲黃': round(6.0 / 12, 2),
        '五靈脂': round(4.0 / 12, 2),
    },
    "身痛逐瘀湯": {
        '當歸': round(3.0 / 9, 2),
        '川牛膝': round(3.0 / 9, 2),
        '桃仁': round(3.0 / 9, 2),
        '紅花': round(3.0 / 9, 2),
        '川芎': round(2.0 / 9, 2),
        '沒藥': round(2.0 / 9, 2),
        '五靈脂': round(2.0 / 9, 2),
        '地龍': round(2.0 / 9, 2),
        '甘草': round(2.0 / 9, 2),
        '秦艽': round(1.0 / 9, 2),
        '羌活': round(1.0 / 9, 2),
        '香附': round(1.0 / 9, 2),
    },
    "血府逐瘀湯": {
        '當歸': round(4.5 / 18, 2),
        '生地黃': round(4.5 / 18, 2),
        '桃仁': round(6.0 / 18, 2),
        '紅花': round(4.5 / 18, 2),
        '枳殼': round(3.0 / 18, 2),
        '赤芍': round(3.0 / 18, 2),
        '柴胡': round(1.5 / 18, 2),
        '甘草': round(1.5 / 18, 2),
        '桔梗': round(2.3 / 18, 2),
        '川芎': round(2.3 / 18, 2),
        '川牛膝': round(4.5 / 18, 2),
    },
    "溫經湯": {
        '吳茱萸': round(3.0 / 13.5, 2),
        '當歸': round(2.0 / 13.5, 2),
        '川芎': round(2.0 / 13.5, 2),
        '白芍': round(2.0 / 13.5, 2),
        '人參': round(2.0 / 13.5, 2),
        '桂枝': round(2.0 / 13.5, 2),
        '阿膠': round(2.0 / 13.5, 2),
        '牡丹皮': round(2.0 / 13.5, 2),
        '生薑': round(2.0 / 13.5, 2),
        '甘草': round(2.0 / 13.5, 2),
        '半夏': round(3.0 / 13.5, 2),
        '麥門冬': round(4.0 / 13.5, 2),
    },
    "麥門冬湯": {
        '麥門冬': round(10.0 / 15, 2),
        '半夏': round(5.0 / 15, 2),
        '人參': round(2.0 / 15, 2),
        '炙甘草': round(2.0 / 15, 2),
        '粳米': round(6.0 / 15, 2),
        '大棗': round(3.0 / 15, 2),
    },"竹葉石膏湯": {
        '竹葉': round(2.0 / 12, 2),
        '石膏': round(16.0 / 12, 2),
        '半夏': round(4.0 / 12, 2),
        '人參': round(3.0 / 12, 2),
        '炙甘草': round(2.0 / 12, 2),
        '粳米': round(6.0 / 12, 2),
        '麥門冬': round(6.0 / 12, 2),
    }}

def all_combinations(database, exclude):
    keys = [key for key in database.keys() if key != exclude]
    return chain(*[combinations(keys, i) for i in range(1, min(len(keys), 3)+1)])

def calculate_herbs_dosage(dosages, combination, database):
    herbs_dosage = {}
    for dosage, prescription in zip(dosages, combination):
        for herb, amount in database[prescription].items():
            if herb in herbs_dosage:
                herbs_dosage[herb] += amount * dosage
            else:
                herbs_dosage[herb] = amount * dosage
    return herbs_dosage

def objective_func(x, target_composition, combination, database):
    combined_composition = {}
    for i, prescription in enumerate(combination):
        for herb, amount in database[prescription].items():
            if herb in combined_composition:
                combined_composition[herb] += amount * x[i]
            else:
                combined_composition[herb] = amount * x[i]

    difference = 0
    non_target_herbs_count = 0
    for herb, target_amount in target_composition.items():
        combined_amount = combined_composition.get(herb, 0)
        difference += (target_amount - combined_amount)**2

    # 計算非目標方劑藥物的數量
    for herb in combined_composition:
        if herb not in target_composition:
            non_target_herbs_count += 1

    # 將非目標方劑藥物的數量作為懲罰項添加到差異中
    # 懲罰因子可以根據需要調整
    penalty_factor = 33  # 懲罰因子，需要根據實際情況進行調整
    difference += penalty_factor * non_target_herbs_count

    return difference

def is_herb_in_target(herb, target_composition):
    return herb in target_composition
def calculate_match_with_highlights(target_composition, combination, database):
    initial_guess = [1 for _ in combination]  # Initial guess
    bounds = [(0, 200) for _ in combination]

    result = minimize(objective_func, initial_guess, args=(target_composition, combination, database),
                      method='SLSQP', bounds=bounds)

    if result.success:
        dosages = result.x
        herbs_dosage = calculate_herbs_dosage(dosages, combination, database)
        match_percentage = 100 - objective_func(dosages, target_composition, combination, database)

        # Sorting the herbs dosage dictionary
        sorted_herbs_dosage = dict(sorted(herbs_dosage.items(),
                                          key=lambda item: (not is_herb_in_target(item[0], target_composition), item[0])))

        # Highlighting herbs that are in the target composition
        highlighted_herbs_dosage = {}
        for herb, dosage in sorted_herbs_dosage.items():
            if is_herb_in_target(herb, target_composition):
                highlighted_herb = f"**{herb}**"  # Adding bold markup
            else:
                highlighted_herb = herb
            highlighted_herbs_dosage[highlighted_herb] = dosage

        return match_percentage, combination, dosages, highlighted_herbs_dosage
    else:
        return 0, combination, initial_guess, {}

# 使用修正後的函數進行匹配計算，並確保目標組成中的藥物名稱被加粗並排在前面。


# 假設性的修改部分，需要結合之前的代碼理解
def find_best_matches(name, database, adjusted_target_composition, top_n=5):
    if name and name not in database:
        return "方劑不存在於資料庫中"

    all_possible_combinations = all_combinations(database, name if name else "")
    matches = [calculate_match_with_highlights(adjusted_target_composition, combo, database) for combo in all_possible_combinations]
    best_matches = sorted(matches, key=lambda x: -x[0])[:top_n]

    for match in best_matches:
        match_percentage, combination, dosages, herbs_dosage = match
        combination_str = '+'.join([f"{prescription}{dosage:.2f}" for prescription, dosage in zip(combination, dosages)])
        print(f"匹配度: {match_percentage:.2f}%，組合: {combination_str}")
        for herb, dosage in herbs_dosage.items():
            print(f"    {herb}: {dosage:.2f}")
        print("\n")

# 之前的解析藥材組合輸入和調整目標組成的部分


def adjust_target_composition_for_dosage(target_composition, input_dosage):
    adjusted_target_composition = {}
    for herb, proportion in target_composition.items():
        adjusted_target_composition[herb] = proportion * input_dosage
    return adjusted_target_composition

# 處理用戶輸入
user_input = input("請輸入方劑名稱和劑量或藥材組合(ex.補中益氣湯3或人參3+茯苓3)：")

def parse_prescription_and_dosage(input_str):
    for i in range(len(input_str)-1, -1, -1):
        if not input_str[i].isdigit():
            return input_str[:i+1], float(input_str[i+1:])
    return None, None

if '+' in user_input:  # 藥材組合輸入
    herbs_input = user_input.split('+')
    adjusted_target_composition = {}
    unknown_herbs = []
    for herb_input in herbs_input:
        herb, dosage = parse_prescription_and_dosage(herb_input)
        dosage = float(dosage)
        # 檢查藥物是否在任一方劑的成分中
        if not any(herb in prescription.values() for prescription in prescription_database.values()):
            unknown_herbs.append(herb)
        else:
            if herb in adjusted_target_composition:
                adjusted_target_composition[herb] += dosage
            else:
                adjusted_target_composition[herb] = dosage
    if unknown_herbs:
        print(f"資料庫尚未收載以下藥物：{', '.join(unknown_herbs)}")
    else:
        # 直接使用調整後的目標組成進行匹配
        find_best_matches(None, prescription_database, adjusted_target_composition)
else:
    prescription_name, input_dosage = parse_prescription_and_dosage(user_input)
    if prescription_name in prescription_database:
        target_composition = prescription_database[prescription_name]
        adjusted_target_composition = adjust_target_composition_for_dosage(target_composition, input_dosage)
        find_best_matches(prescription_name, prescription_database, adjusted_target_composition)
    else:
        print("資料庫尚未收載此方劑。")

        print("請輸入有效的劑量。")
